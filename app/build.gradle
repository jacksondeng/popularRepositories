apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

def configuration = rootProject.ext.configuration
def libraries = rootProject.ext.libraries
def tests = rootProject.ext.tests


android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.jacksondeng.gojek.popularrepositories"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        // To prevent (RuntimeException: Method getMainLooper in android.os.Looper not mocked) during unit test
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${configuration.kotlinVersion}"
    implementation "androidx.appcompat:appcompat:${libraries.appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${libraries.constraintLayout}"
    implementation "com.google.android.material:material:${libraries.material}"

    implementation "androidx.core:core-ktx:${libraries.ktxVersion}"
    implementation "androidx.lifecycle:lifecycle-extensions:${libraries.lifecycleExt}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${libraries.lifecycleExt}"

    // Tests
    testImplementation "junit:junit:${tests.junit}"
    testImplementation "android.arch.core:core-testing:${tests.archCore}"
    testImplementation "io.mockk:mockk:${tests.mockk}"

    androidTestImplementation "androidx.test:runner:${tests.testRunner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${tests.espresso}"
    androidTestImplementation "androidx.test.ext:junit:${tests.androidJunit}"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:${libraries.recyclerView}"

    // ConstraintLayout
    implementation "androidx.constraintlayout:constraintlayout:${libraries.constraintLayout}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${libraries.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${libraries.moshi}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libraries.rxjavaAdapter}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${libraries.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${libraries.rxandroid}"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:${libraries.okHttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libraries.okHttpLog}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${libraries.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${libraries.glide}"

    // SwipeRefreshLayout
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${libraries.swipeRefreshLayout}"

    // Dagger
    implementation "com.google.dagger:dagger:${libraries.dagger}"
    implementation "com.google.dagger:dagger-android-support:${libraries.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${libraries.dagger}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${libraries.dagger}"
    kapt "com.google.dagger:dagger-compiler:${libraries.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${libraries.dagger}"


    // Room
    implementation "androidx.room:room-runtime:${libraries.room}"
    kapt "androidx.room:room-compiler:${libraries.room}"
    implementation "androidx.room:room-rxjava2:${libraries.room}"

    // Joda
    implementation "joda-time:joda-time:${libraries.joda}"

    // Multidex
    implementation "com.android.support:multidex:${configuration.multiDex}"
}